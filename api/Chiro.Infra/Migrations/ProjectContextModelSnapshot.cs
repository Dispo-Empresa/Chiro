// <auto-generated />
using System;
using Chiro.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chiro.Infra.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chiro.Domain.Entities.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.BoardAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("PositionX")
                        .HasColumnType("double precision");

                    b.Property<double>("PositionY")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardActions");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TimelineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("TimelineId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.Timeline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.TimelineAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AdjustedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("BoardActionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("TimelineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoardActionId");

                    b.HasIndex("TimelineId");

                    b.ToTable("TimelineActions");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.BoardAction", b =>
                {
                    b.HasOne("Chiro.Domain.Entities.Board", null)
                        .WithMany("BoardActions")
                        .HasForeignKey("BoardId");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.Project", b =>
                {
                    b.HasOne("Chiro.Domain.Entities.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chiro.Domain.Entities.Timeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.TimelineAction", b =>
                {
                    b.HasOne("Chiro.Domain.Entities.BoardAction", "BoardAction")
                        .WithMany()
                        .HasForeignKey("BoardActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chiro.Domain.Entities.Timeline", null)
                        .WithMany("TimelineActions")
                        .HasForeignKey("TimelineId");

                    b.Navigation("BoardAction");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.Board", b =>
                {
                    b.Navigation("BoardActions");
                });

            modelBuilder.Entity("Chiro.Domain.Entities.Timeline", b =>
                {
                    b.Navigation("TimelineActions");
                });
#pragma warning restore 612, 618
        }
    }
}
